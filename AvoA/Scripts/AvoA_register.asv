clear; clc; close all;

%% Load Info and Image
dicomFolder1 = '../Data/20240910/series/';
dicomFolder2 = '../Data/20241007/series/';

warning('off', 'MATLAB:DELETE:Permission');

disp('Scanning Images...');
[im1, info1] = loadDicom3D(dicomFolder1);
[im2, info2] = loadDicom3D(dicomFolder2);

%% Crop Images
im1_cropped = im1(450:end, 230:270, 400:460); % how will i revert back if they are not the same size
im2_cropped = im2(450:end, 220:270, 400:460);

% figure;
% subplot(2, 1, 1);
% imshow(im1_cropped, []);
% 
% subplot(2, 1, 2);
% imshow(im2_cropped, []);

interactiveRegVis(im1_cropped, im2_cropped, 'z');

%% Threshold & Downsample Images
disp('Thresholding images...');
threshold = 500;
imBW1 = im1 > threshold;
imBW2 = im2 > threshold;

scale = 10;

imBW1_double = double(imBW1) * scale;
imBW2_double = double(imBW2) * scale;

% step = 4;
% fixedImageBW_down = imBW1_double(1:step:end, 1:step:end, 1:step:end);
% movingImageBW_down = imBW2_double(1:step:end, 1:step:end, 1:step:end);

im1_down = im1(1:step:end, 1:step:end, 1:step:end);
im2_down = im2(1:step:end, 1:step:end, 1:step:end);

%% Get References
shell = find(any(any(imBW_down > 0, 1), 2));
fixedShell = fixedImageBW_down(:, :, shell);
movingShell = movingImageBW_down(:, :, shell);

fRef = createRef(info1, fixedShell, step);
mRef = createRef(info2, movingShell, step);

%% Registration
[optimizer, metric] = imregconfig('monomodal');
optimizer.GradientMagnitudeTolerance = 1e-3;
optimizer.MinimumStepLength = 1e-9;
optimizer.MaximumStepLength = 6.25e-3;
optimizer.MaximumIterations = 300;
optimizer.RelaxationFactor = 0.6;

PyramidLevel = 3;
tform = imregtform(movingShell, mRef, fixedShell, ...
    fRef, 'affine', optimizer, metric, ...
    'PyramidLevels', PyramidLevel, 'DisplayOptimization', true);

clc;
delete('optimization_log.txt');
diary('optimization_log.txt');

registeredImage = imwarp(movingShell, mRef, tform, 'OutputView', fRef);

diary off;

%% Evaluation Metric
overlap = 2 * nnz(fixedShell & registeredImage) / (nnz(fixedShell) + nnz(registeredImage));
disp(['Dice Coefficient: ', num2str(overlap)]);

%% Interactive Visualization
interactiveRegVis(registeredImage, fixedShell, 'z');