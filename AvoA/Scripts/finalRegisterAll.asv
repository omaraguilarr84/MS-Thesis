clear; clc; close all;

dataFolder = '../Data/';
outputFolder = '../RegisteredData/';

subfolders = dir(dataFolder);
subfolders = subfolders([subfolders.isdir]);
subfolders = subfolders(~ismember({subfolders.name}, {'.', '..'}));

dates = {subfolders.name};
dates = sort(dates);

fixedDate = dates{1};
fixedPath = fullfile(dataFolder, fixedDate, 'series');
[fixedImage, fInfo] = loadDicom3D(fixedPath);

threshold_shell = 500;
fixedImage_shell = double(fixedImage > threshold_shell);

if ~exist(outputFolder, 'dir')
    mkdir(outputFolder);
end

scores = table('Size', [length(dates)-1, 4], ...
    'VariableTypes', {'string', 'double', 'double', 'double'}, ...
    'VariableNames', {'MovingDate', 'Dice', ...
    'HD', 'NormHD'});

for i = 2:length(dates)
    fprintf('Registering %d of %d...\n', idx-1, length(dates)-1);

    movingDate = dates{i};
    movingPath = fullfile(dataFolder, movingDate, 'series');
    [movingImage, mInfo] = loadDicom3D(movingPath);

    movingImage_shell = double(movingImage > threshold_shell);
    
    maxObjectiveEvals = 100;
    useParallel = true;
    results_affine = bayesianOptimizer3D(fixedImage_shell, movingImage_shell, ...
        maxObjectiveEvals, 'affine', useParallel);

    results_similarity = bayesianOptimizer3D(fixedImage_shell, movingImage_shell, ...
        maxObjectiveEvals, 'similarity', useParallel);

    if results_affine < 

    [optimizer_shell, metric_shell] = imregconfig('monomodal');
    optimizer_shell.GradientMagnitudeTolerance = results.XAtMinObjective.GradientMagnitudeTolerance;
    optimizer_shell.MinimumStepLength = results.XAtMinObjective.MinimumStepLength;
    optimizer_shell.MaximumStepLength = results.XAtMinObjective.MaximumStepLength;
    optimizer_shell.MaximumIterations = results.XAtMinObjective.MaximumIterations;
    optimizer_shell.RelaxationFactor = results.XAtMinObjective.RelaxationFactor;
    pyrLevel = results.XAtMinObjective.PyramidLevel;

    tform_shell = imregtform(movingImage_shell, fixedImage_shell, 'affine', ...
        optimizer_shell, metric_shell, 'PyramidLevels', pyrLevel);

    registeredImage_shell = imwarp(movingImage_shell, tform_shell, 'OutputView', ...
        imref3d(size(fixedImage_shell)));

    threshold_circle = -1200;
    fixedImage_circle = double(fixedImage > threshold_circle);
    movingImage_circle = double(movingImage > threshold_circle);

    fixedImage_circle = fixedImage_circle(:, :, 1);
    movingImage_circle = movingImage_circle(:, :, 1);

    [optimizer_circle, metric_circle] = imregconfig('monomodal');

    tform_circle = imregtform(movingImage_circle, fixedImage_circle, ...
        'similarity', optimizer_circle, metric_circle);

    registeredImage_circle = imwarp(movingImage_circle, tform_circle, ...
        'linear', 'OutputView', imref2d(size(fixedImage_circle)));

    mat_final = eye(4);
    for i = 1:2
        mat_final(i, i) = tform_circle.A(i, i);
        mat_final(i, 4) = tform_circle.A(i, 3);
    end
    mat_final(3, 3) = tform_shell.A(3, 3);

    tform_final = affinetform3d(mat_final);

    registeredImage_final = imwarp(movingImage, tform_final, 'linear', ...
        'OutputView', imref3d(fixedImage));

    scores.MovingDate{i-1} = movingDate;
    scores.Dice(i-1) = computeDice3D(fixedImage, registeredImage_final);
    scores.HD(i-1) = computeHausdorffDistance(registeredImage_final, ...
        fixedImage);
    scores.NormHD(i-1) = scores.HD(i-1) / sqrt(size(fixedImage, 1)^2 + ...
        size(fixedImage, 2)^2 + size(fixedImage, 3)^2);

    outputFile = fullfile(outputFolder, sprintf('%s-%s.dcm', fixedDate, ...
        movingDate));
    dicomwrite(uint16(registeredImage_final), outputFile);
end

